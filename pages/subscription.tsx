import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/home.module.css'
import "@fontsource/nunito"
import { useUser } from '@/modules/hooks/useUser'
import { createServerSupabaseClient, supabase } from '@/modules/supabase'
import { NextRequest } from 'next/server'
import { GetServerSidePropsContext, GetServerSidePropsResult, NextPage } from 'next'
import initStripe from "stripe";
import { keyable } from '@/types'
import { promise } from 'zod'
import Subscription from '@/components/subscription'


const inter = Inter({ subsets: ['latin'] })

export interface SubscriptionType {
  plans: Array<Object>
}

const SubscriptionPage = (props:SubscriptionType) => {
  const {plans} = props

  return (
    <>
      <Head>
        <title>News App</title>
        <meta name="description" content="Generated by News App" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
          
          <Subscription plans={plans} />
      </main>
    </>
  )
}


export const getServerSideProps = async (req:NextRequest) => {
//   console.log('test')
//   console.log(req)
//   const cookie = parse(req.headers.get('Cookie') || '');
 
//   const accessToken  = cookie['my-access-token']
// const  refreshToken = cookie['my-refresh-token']

// if (refreshToken && accessToken) {
  
//   console.log('fdfdf')
  
//  const {data: { session }} =  await supabase.auth.setSession({
//     access_token: accessToken,
//     refresh_token: refreshToken,
   
//   }) 
//   const user = await sa  `upabase.auth.getSession()
//   console.log(user)

//@ts-ignore
const stripe = initStripe(process.env.STRIPE_SECRET_KEY)

const {data:prices} = await stripe.prices.list()

 const plans =  await Promise.all(prices.map(async(price:keyable) => {
    const product = await stripe.products.retrieve(price.product)
    return {
      id:price.id,
      name:product.name,
      price:price.unit_amount,
      currency:price.currency
    }
  }))

  return {
    props:{plans}
  }
}

export default SubscriptionPage;